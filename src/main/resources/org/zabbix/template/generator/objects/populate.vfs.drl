package org.zabbix.template.generator.objects;


rule "Rule 4: generate vfs.fs.pused"
	agenda-group "populate"
	activation-group "vfs.fs.pused"
	salience -25
	dialect "mvel"
when
	$m : Metric ( id == 'vfs.fs.pused')
	$m_used: Metric ( id == 'vfs.fs.used')
	$m_total: Metric ( id == 'vfs.fs.total')
then
    logger.debug(marker,"There are vfs.fs.total and vfs.fs.used found "+$m);
    modify( $m ) { 
			expressionFormula = "(last(\042"+$m_used.getKeyQuotesEscaped()+"\042)/last(\042"+$m_total.getKeyQuotesEscaped()+"\042))*100"
	  };
end


rule "Rule 5: generate vfs.fs.pused"
	agenda-group "populate"
	activation-group "vfs.fs.pused"
	salience -5
	dialect "mvel"
when
	$m : Metric ( id == 'vfs.fs.pused')
	$m_used: Metric ( id == 'vfs.fs.units.used')
	$m_total: Metric ( id == 'vfs.fs.units.total')
then
    logger.debug(marker,"There are vfs.fs.units.total and vfs.fs.units.used found "+$m);
    modify( $m ) { 
			expressionFormula = "(last(\042"+$m_used.getKeyQuotesEscaped()+"\042)/last(\042"+$m_total.getKeyQuotesEscaped()+"\042))*100"
	  };
end

rule "Rule 6: generate vfs.fs.pused"
	agenda-group "populate"
	activation-group "vfs.fs.pused"
	salience -35
	dialect "mvel"
when
	$m : Metric ( id == 'vfs.fs.pused')
	$m_free: Metric ( id == 'vfs.fs.free')
	$m_total: Metric ( id == 'vfs.fs.total')
then
    logger.debug(marker,"There are vfs.fs.total and vfs.fs.free found "+$m);
    modify( $m ) { 
			expressionFormula = "((last(\042"+$m_total.getKeyQuotesEscaped()+"\042)-last(\042"+$m_free.getKeyQuotesEscaped()+"\042))/last(\042"+$m_total.getKeyQuotesEscaped()+"\042))*100"
	  };
end


rule "Rule 7: generate vfs.fs.pused"
	agenda-group "populate"
	activation-group "vfs.fs.pused"
	salience -50
	dialect "mvel"
when
	$m : Metric ( id == 'vfs.fs.pused')
	$m_free: Metric ( id == 'vfs.fs.free')
	$m_used: Metric ( id == 'vfs.fs.used')
then
    logger.debug(marker,"There are vfs.fs.used and vfs.fs.free found "+$m);
    modify( $m ) { 
		    expressionFormula = "(last(\042"+$m_used.getKeyQuotesEscaped()+"\042)/(last(\042"+$m_free.getKeyQuotesEscaped()+"\042)+last(\042"+$m_used.getKeyQuotesEscaped()+"\042)))*100"
	  };
end


rule "Rule 8: generate vfs.fs.total"
	agenda-group "populate"
	activation-group "vfs.fs.total"
	salience -5
	dialect "mvel"
when
    $m : Metric ( id == 'vfs.fs.total')
	$m_u_total : Metric ( id == 'vfs.fs.units.total')
	$m_u: Metric ( id == 'vfs.fs.units')
then
    logger.info(marker,"There are vfs.fs.units.total and vfs.fs.units found ");
    modify( $m ) {
		    expressionFormula = "(last(\042"+$m_u_total.getKeyQuotesEscaped()+"\042)*last(\042"+$m_u.getKeyQuotesEscaped()+"\042))"
	};
end

rule "Rule 9: generate vfs.fs.used"
	agenda-group "populate"
	activation-group "vfs.fs.used"
	salience -5
	dialect "mvel"
when
    $m : Metric ( id == 'vfs.fs.used')
	  $m_u_used : Metric ( id == 'vfs.fs.units.used')
	  $m_u: Metric ( id == 'vfs.fs.units')
then
    logger.info(marker,"There are vfs.fs.units.used and vfs.fs.units found ");
    modify( $m ) {
		    expressionFormula = "(last(\042"+$m_u_used.getKeyQuotesEscaped()+"\042)*last(\042"+$m_u.getKeyQuotesEscaped()+"\042))"
	  };
end


rule "Rule 10: generate vfs.fs.used"
	agenda-group "populate"
	activation-group "vfs.fs.used"
	salience -50
	dialect "mvel"
when
    $m : Metric ( id == 'vfs.fs.used')
	$m_total : Metric ( id == 'vfs.fs.total')
	$m_free: Metric ( id == 'vfs.fs.free')
then
    logger.info(marker,"There are vfs.fs.total and vfs.fs.free found ");
    modify( $m ) {
		    expressionFormula = "(last(\042"+$m_total.getKeyQuotesEscaped()+"\042)-last(\042"+$m_free.getKeyQuotesEscaped()+"\042))"
	  };
end