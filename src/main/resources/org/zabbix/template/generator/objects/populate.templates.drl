package org.zabbix.template.generator.objects

;

//Theses rules attaches template dependencies if there are some Classes present in it
rule "Rule 1: generate dependencies for templates - Template Module Generic"
	agenda-group "populate"
	no-loop
	dialect "mvel"
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.SNMP_DEVICE) from $classes)
then
    logger.info(marker,"Found SNMP_DEVICE class, attaching template dependency for "+$t.name);
    modify($t) {
		getTemplates().add("Template Module Generic SNMPvX");
	};
end

//Theses rules attaches template dependencies if there are some Classes present in it
rule "Rule 1a: generate SNMPvX suffix for templates of class SNMPv1,SNMPv2,SNMPv3"
	agenda-group "populate"
	no-loop
	salience 1
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.SNMPV1 || this == TemplateClass.SNMPV2|| this == TemplateClass.SNMPV3) from $classes)
then
    logger.info(marker,"Found SNMPv1|v2|v3 class, attaching SNMP suffix to name for "+$t.getName());
    modify($t) {setName($t.getName()+" SNMPvX");};
end

//This rules attaches template dependencies if there are some Classes present in it
rule "Rule 2: generate dependencies for templates - Template Module Interfaces"
	agenda-group "populate"
	no-loop
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.INTERFACES) from $classes)
then
    logger.info(marker,"Found INTERFACES class, attaching template dependency for "+$t.getName());
    modify($t) {getTemplates().add("Template Module Interfaces SNMPvX");};
end

//This rules attaches template dependencies if there are some Classes present in it
rule "Rule: generate dependencies for templates - Template Module EtherLike-MIB"
	agenda-group "populate"
	no-loop
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.INTERFACES_ETHERLIKE_EXTENSION) from $classes)
then
    logger.info(marker,"Found INTERFACES_ETHERLIKE_EXTENSION class, attaching template dependency for "+$t.getName());
    modify($t) {getTemplates().add("Template Module EtherLike-MIB SNMPvX");};
end


//This rules attaches template dependencies if there are some Classes present in it
rule "Rule 3: generate dependencies for templates - Template Module Interfaces Simple"
	agenda-group "populate"
	no-loop
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.INTERFACES_SIMPLE) from $classes)
then
    logger.info(marker,"Found INTERFACES_SIMPLE class, attaching template dependency for "+$t.getName());
    modify($t) {getTemplates().add("Template Module Interfaces Simple SNMPvX");};
end





//Theses rules adds macros if there are some Classes(or metrics) present in the template
rule "Rule 4: generate additional macros"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "system.cpu.util") from $metrics)
then
    logger.info(marker,"Found system.cpu.util metric, adding additional MACRO...");
    modify($t) {getMacros().add(new UserMacro("{$CPU.UTIL.CRIT}","90"));};
end

rule "Rule 5: generate additional macros"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "vm.memory.pused") from $metrics)
then
    logger.info(marker,"Found vm.memory.pused metric, adding additional MACRO...");
    modify($t) {getMacros().add(new UserMacro("{$MEMORY_UTIL_MAX}","90"));};
end

rule "Rule 5.1: generate additional macros"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "vm.memory.available") from $metrics)
then
    logger.info(marker,"Found vm.memory.available metric, adding additional MACRO...");
    modify($t) {getMacros().add(new UserMacro("{$MEMORY_AVAILABLE_MIN}","20M"));};
end

rule "Rule 5.2: generate additional macros"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "system.swap.pfree") from $metrics)
then
    logger.info(marker,"Found system.swap.pfree metric, adding additional MACRO...");
    modify($t) {getMacros().add(new UserMacro("{$SWAP_PFREE_WARN}","50"));};
end



/*
Add macro if it doesn't exist before.
*/
rule "Rule 6: generate additional macros"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "sensor.temp.value") from $metrics)
then
    logger.info(marker,"Found sensor.temp.value metric, adding additional MACRO...");
    modify($t) {
//    	getMacros().add(new UserMacro("{$TEMP_CRIT:\"CPU\"}","75")),
//    	getMacros().add(new UserMacro("{$TEMP_WARN:\"CPU\"}","70")),
//    	getMacros().add(new UserMacro("{$TEMP_CRIT:\"AMBIENT\"}","35")),
//    	getMacros().add(new UserMacro("{$TEMP_WARN:\"AMBIENT\"}","30")),
    	getMacros().add(new UserMacro("{$TEMP_CRIT}","60")),
    	getMacros().add(new UserMacro("{$TEMP_WARN}","50")),
    	getMacros().add(new UserMacro("{$TEMP_CRIT_LOW}","5"));
    };
end

rule "Rule 7: generate additional macros (vfs.fs.pused)"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "vfs.fs.pused") from $metrics)
then
    logger.info(marker,"Found vfs.fs.pused metric, adding additional MACRO...");
    modify($t) {
    	getMacros().add(new UserMacro("{$VFS.FS.PUSED.MAX.CRIT}","90")),
    	getMacros().add(new UserMacro("{$VFS.FS.PUSED.MAX.WARN}","80"));	
    };
end

rule "Rule 7.1: generate additional macros (vfs.fs.inode.pfree)"
	agenda-group "populate"
	no-loop
when
	$t: Template($metrics: metricsRegistry)
    exists (Metric(id == "vfs.fs.inode.pfree") from $metrics)
then
    logger.info(marker,"Found vfs.fs.inode.pfree, adding additional MACRO...");
    modify($t) {
    	getMacros().add(new UserMacro("{$VFS.FS.INODE.PFREE.MIN.WARN}","20")),
    	getMacros().add(new UserMacro("{$VFS.FS.INODE.PFREE.MIN.CRIT}","10"));
    };
end

rule "Rule 8: generate additional macros (General class)"
	agenda-group "populate"
	no-loop
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.GENERAL) from $classes)
then
    logger.info(marker,"Found GENERAL class, adding additional MACRO");
    modify($t) {
    	getMacros().add(new UserMacro("{$SNMP_TIMEOUT}","3m"));	
    };
end


rule "Rule 9: generate additional macros (IF_MIB class)"
	agenda-group "populate"
	no-loop
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.IF_MIB) from $classes)
then
    logger.info(marker,"Found IF_MIB class, adding additional MACRO");
    modify($t) {
    	getMacros().add(new UserMacro("{$IFCONTROL}","1")),
    	getMacros().add(new UserMacro("{$IF_UTIL_MAX}","90")),
    	getMacros().add(new UserMacro("{$IF_ERRORS_WARN}","2"));	
    };
end


rule "Rule 11: generate additional macros (ICMP class)"
	agenda-group "populate"
	no-loop
when
	$t: Template($classes: classes)
    exists (TemplateClass(this == TemplateClass.ICMP) from $classes)
then
    logger.info(marker,"Found ICMP class, adding additional MACRO");
    modify($t) {
    	getMacros().add(new UserMacro("{$ICMP_LOSS_WARN}","20")),
    	getMacros().add(new UserMacro("{$ICMP_RESPONSE_TIME_WARN}","0.15"));	
    };
end
