package org.zabbix.template.generator.objects
global org.slf4j.Logger logger;



rule "Rule 1: automatically add type=SNMP if type is not populated"
	agenda-group "populate"
when
	$m : Metric (type == null, snmpObject !=null, oid != null )
then
    logger.debug("Adding type=SNMP for "+$m);
    modify($m) { setType(Metric.Type.SNMP) };
end



rule "Rule 2: Generate metric key for SNMP type"
	agenda-group "populate"
when
	$m : Metric ( key == null, snmpObject != null, prototype != null)
then
    logger.debug("There is no key for "+$m+" so let's generate it...");
    modify( $m ) { 
    		setKey( $m.getPrototype()+"["+$m.getSnmpObject()+"]")
    	};
end


rule "Rule 3: prefix Name with alarmObject"
	agenda-group "populate"
when
	$m : Metric ( alarmObject != null)
then
    logger.debug("Changing name to 'alarmObject: $m.name' for "+$m);
    modify( $m ) { 
    		setName( $m.getAlarmObject() + ": " + $m.getName() )
    	};
end

rule "Rule 3a: generate each trigger name(discovery rules, prefix with alarmObject)"
	agenda-group "populate"
	no-loop
when
    $m : Metric ($key: key != null, alarmObject != null, $triggers: triggers)
    $tr: Trigger ($e: expression!=null) from $triggers 
then
    logger.debug("Generating trigger name for "+ $tr.getName());
    $tr.setName( $m.getAlarmObject() + ": " + $tr.getName() );
end

rule "Rule 3b: generate each graph name(discovery rules, prefix with alarmObject)"
	agenda-group "populate"
	no-loop
when
    $m : Metric ($key: key != null, alarmObject != null, $graphs: graphs)
    $gr: Graph () from $graphs
then
    logger.info("Generating graph name for "+ $gr);
    $gr.setName( $m.getAlarmObject() + ": " + $gr.getName() );
end


rule "Rule 8: purge original description(description)"
	agenda-group "populate"
	salience 101
when
	$m : Metric (vendorDescription != null )
then
    logger.debug("Generating description(description) for "+$m);
    modify( $m ) { 
    		setDescription("")
    	};
end

rule "Rule 9: generate each item description(mib)"
	agenda-group "populate"
	salience 100
when
	$m : Metric (mib != null)
then
    logger.debug("Generating description(mib) for "+$m);
	if ($m.getDescription() != null) {
		modify( $m ) {
    		setDescription( "MIB: " + $m.getMib()+"\n"+$m.getDescription() )
	    };
	}
	else {
		modify( $m ) {
			setDescription( "MIB: " + $m.getMib()+"\n" )
		};
	}    	
end

rule "Rule 10: generate each item description"
	agenda-group "populate"
	salience 99
when
	$m : Metric (vendorDescription != null)
then
    logger.debug("Generating description(vendorDescription) for "+$m);
	if ($m.getDescription() != null) {
		modify( $m ) {
    		setDescription( $m.getDescription() + "\n" + $m.getVendorDescription() )
	    };
	}
	else {
		modify( $m ) {
			setDescription( $m.getVendorDescription() )
		};
	}
end

rule "Rule 11: generate each item description"
	agenda-group "populate"
	salience 98
when
	$m : Metric (ref != null)
then
    logger.debug("Generating description(ref) for "+$m);
    modify( $m ) { 
    		setDescription( $m.getDescription() + "\nReference: " + $m.getRef() );
    	};
end

