package org.zabbix.template.generator.objects;


rule "Validation rule 1: you should have both discoveryRule and resource defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m : Metric ($dr: discoveryRule != null, resource == null )
	DiscoveryRule(name == $dr, singleton == false)
then
    logger.error(marker,"Please define 'resource' for "+$m.id);
end


rule "Validation rule 2: check key"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m : Metric (key == null)
	$ij: InputJSON( )
then
    logger.error(marker,"There is no 'key' for "+$m.id);
	$ij.failed = true;
end

rule "Validation rule 2.1: check key (discovery rule)"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$dr : DiscoveryRule (key == null)
	$ij: InputJSON( )
then
    logger.error(marker,"There is no 'key' for "+$dr.name);
	$ij.failed = true;
end




rule "Validation rule 3: valueMap mentioned in metric should be defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m: Metric($vm_name : valueMap != null)
	$ij: InputJSON( )
	not ValueMap(name == $vm_name) from $ij.valueMaps
then
    logger.error(marker,"No value map found for " + $vm_name + ". It used in " +$m.id);
	$ij.failed = true;
end


rule "Validation rule 4: check Type"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m: Metric(type == null, external == false)
	$ij: InputJSON( )
then
    logger.error(marker,"No 'type' defined for {}", $m.id);
	$ij.failed = true;
end

rule "Validation rule 4.1: check Type (discovery rule)"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$dr: DiscoveryRule(type == null)
	$ij: InputJSON()
then
    logger.error(marker,"No 'type' defined for {}", $dr.name);
	$ij.failed = true;
end


rule "Validation rule 5: Macro defined but never used in triggers or item keys"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$t: Template (macros != null)
	$macro: UserMacro() from $t.macros
    not $tr:  Trigger  ( expression contains $macro.extractMacroName() )
    not $tr2: Trigger  ( recoveryExpression contains $macro.extractMacroName() )
	not $metric: Metric ( key contains $macro.extractMacroName() )
	not $metric: Metric ( url contains $macro.extractMacroName() ) // http url for http agent
then
    logger.warn(marker,"User Macro found but never used in triggers or item keys|item http url: {} in template {}", $macro.macro, $t.name);
end



//usermacro regex: ^\{\$[A-Z0-9_\\.]+(:".+")?\}$
rule "Validation rule 6: Check usermacro syntax used"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$t: Template(macros != null)
	UserMacro( $macro: macro not matches "^\\{\\$[A-Z0-9_\\.]+(:\".+\")?\\}$") from $t.macros
then
    logger.error(marker,"Bad User Macro found {} in template {}", $macro, $t.name);
end

//TODO: Works only if single macro used in trigger expression. Broken(not tested) if multiple macros used in trigger expression
rule "Validation rule 7: Macro is used in triggers but not defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
      $t: Template ()
      $tr: Trigger  ( expression matches ".+\\{\\$[A-Z0-9_\\.]+(:\".+\")?\\}.+")
      forall (
		$macro: UserMacro() from $t.macros
        Trigger( this == $tr, expression not contains $macro.extractMacroName())
        Trigger( this == $tr, recoveryExpression not contains $macro.extractMacroName())
      )
then
    logger.error(marker,"User Macro is used in the trigger but not defined: {} in template {}", $tr.expression, $t.name);
end


//TODO: Works only if single macro used in item key. Broken if multiple macros used in item key
rule "Validation rule 8: Macro is used in item keys but not defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
      $t: Template ()
      $m: Metric ( key matches ".+\\{\\$[A-Z0-9_\\.],+(:\".+\")?\\}.+")
      forall ( $macro: UserMacro() from $t.macros
        Metric( this == $m, key not contains $macro.extractMacroName())
      )
then
    logger.error(marker,"User Macro is used in the item key but not defined: {} in template {}", $m.key, $t.name);
end

//TODO: Works only if single macro used in item key. Broken if multiple macros used in item key
rule "Validation rule 9: Macro used in item url but not defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
      $t: Template ()
      $m: Metric ( url matches ".+\\{\\$[A-Z0-9_\\.]+(:\".+\")?\\}.+")
      forall ( $macro: UserMacro() from $t.macros
        Metric( this == $m, url not contains $macro.extractMacroName())
      )
then
    logger.error(marker,"User Macro is used in the url but not defined: {} in template {}", $m.url, $t.name);
end


rule "Validation rule 10: you should have both masterItem and type=DependentItem defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m : Metric (masterItem == null, type == Type.DEPENDENT )
	$ij: InputJSON( )
then
    logger.error(marker,"Please define 'master_item' for "+$m.id);
	$ij.failed = true;
end

rule "Validation rule 10.1: you should have both masterItem and type=DependentItem defined(discovery rule"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$dr : DiscoveryRule (masterItem == null, type == Type.DEPENDENT )
	$ij: InputJSON( )
then
    logger.error(marker,"Please define 'master_item' for "+$dr.name);
	$ij.failed = true;
end

rule "Validation rule: check resourceType (screen items)"
	agenda-group "postvalidate"
	dialect "mvel"
when
	Template($screens: screens)
	$s: Screen($si: screenItems) from $screens
	ScreenItem(resourceType == null) from $si
	$ij: InputJSON( )
then
    logger.error(marker,"No 'resource_type' defined for screen {}. This is probably due to _graph_id or _metric_id not defined properly. If you trying to reference graph or metric from linked template - you need to define it statically instead.", $s.name);
	$ij.failed = true;
end