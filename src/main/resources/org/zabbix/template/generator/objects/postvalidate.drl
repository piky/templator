package org.zabbix.template.generator.objects;


rule "Validation rule 1: you should have both discoveryRule and alarmObject defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m : Metric (discoveryRule != null, alarmObject == null )
then
    logger.error(marker,"Please define 'alarmObject' for "+$m.id);
end


rule "Validation rule 2: check key"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m : Metric (key == null)
then
    logger.error(marker,"There is no 'key' for "+$m.id);
end




rule "Validation rule 3: valueMap mentioned in metric should be defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m: Metric($vm_name : valueMap != null)
	$t: InputJSON( )
	not ValueMap(name == $vm_name) from $t.valueMaps
then
    logger.warn(marker,"No value map found for " + $vm_name + ". It used in " +$m.id);
end


rule "Validation rule 4: check Type"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$m: Metric(type == null)
then
    logger.error(marker,"No 'type' defined for {}",$m.id);
end


rule "Validation rule 5: Macro defined but never used in triggers"
	agenda-group "postvalidate"
	dialect "mvel"
when
	      $t: Template (macros != null)
	          UserMacro($macro: macro) from $t.macros
    not $tr:  Trigger  ( expression contains $macro )
    not $tr2: Trigger  ( recoveryExpression contains $macro )
then
    logger.warn(marker,"User Macro found but never used in triggers: {} in template {}",$macro, $t.name);
end



//usermacro regex: ^\{\$[A-Z0-9_]+(:".+")?\}$
rule "Validation rule 6: Check usermacro syntax used"
	agenda-group "postvalidate"
	dialect "mvel"
when
	$t: Template(macros != null)
	UserMacro( $macro: macro not matches "^\\{\\$[A-Z0-9_]+(:\".+\")?\\}$") from $t.macros
then
    logger.error(marker,"Bad User Macro found {} in template {}",$macro, $t.name);
end

rule "Validation rule 7: Macro used in triggers but not defined"
	agenda-group "postvalidate"
	dialect "mvel"
when
      $t: Template ()
      $tr: Trigger  ( expression matches ".+\\{\\$[A-Z0-9_]+(:\".+\")?\\}.+" )
      forall ( UserMacro( $macro: macro) from $t.macros
        Trigger( this == $tr, expression not contains $macro)
        Trigger( this == $tr, recoveryExpression not contains $macro)
      )

      //exists (Trigger(this == $tr, expression contains $macro))
then
    logger.error(marker,"User Macro is used in the trigger but not defined: {} in template {}", $tr.expression, $t.name);
end