package org.zabbix.template.generator.objects;


rule "Baseline rule: PERFORMANCE+NETWORK"
	agenda-group "baseline"
when
    $t: Template (classes contains TemplateClass.PERFORMANCE , classes contains TemplateClass.NETWORK) and
    not (
        Metric (id =='system.cpu.util') and
        Metric (id =='vm.memory.pused')
    )
then
    logger.error(marker,"This template cannot be badged as PERFORMANCE");
end


rule "Baseline rule: FAULT+NETWORK"
	agenda-group "baseline"
when
    $t: Template (classes contains TemplateClass.FAULT , classes contains TemplateClass.NETWORK) and
    not (
        Metric (id =='sensor.temp.value')
    )
then
    logger.error(marker,"This template cannot be badged as FAULT");
end


rule "Baseline rule: INVENTORY+NETWORK"
	agenda-group "baseline"
when
    $t: Template (classes contains TemplateClass.INVENTORY , classes contains TemplateClass.NETWORK) and
    not (
        Metric (id =='system.hw.model') and
        Metric (id =='system.hw.serialnumber')
    )
then
    logger.error(marker,"This template cannot be badged as INVENTORY");
end



rule "Baseline rule: INTERFACES(IF_MIB)"
	agenda-group "baseline"
when
    $t: Template (classes contains TemplateClass.IF_MIB )
    do [logBadge]
    not (
            Metric (id =='net.if.status') and
            Metric (id =='net.if.in') and
            Metric (id =='net.if.out') and
            Metric (id =='net.if.in.errors') and
            Metric (id =='net.if.out.errors') and
            Metric (id =='net.if.out.discards') and
            Metric (id =='net.if.in.discards') and
            Metric (id =='net.if.type') and
            Metric (id =='net.if.speed')
    ) do [notBadgeFull]
    not (
            Metric (id =='net.if.status') and
            Metric (id =='net.if.in') and
            Metric (id =='net.if.out')
    ) do [notBadgeBase]
then
    //
then[logBadge]
    logger.info(marker,"Checking for IF_MIB badge...");
then[notBadgeBase]
    logger.error(marker,"This template cannot be badged as IF_MIB");
then[notBadgeFull]
    logger.warn(marker,"This template cannot be badged as IF_MIB+FULL");
end