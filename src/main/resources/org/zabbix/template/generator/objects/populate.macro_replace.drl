package org.zabbix.template.generator.objects
;
/*
METRICS
*/
//
rule "Rule: replaces __RESOURCE__ macro in metrics"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null,  $resource: resource != null) 
then
    if ($m.getDescription() !=null) { 
    	$m.setDescription( $m.getDescription().replace("__RESOURCE__",$resource));
    }
    $m.setName( $m.getName().replace("__RESOURCE__",$resource));
end

rule "Rule: replaces __RESOURCE_TYPE__ macro in metrics"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null, $resourceType: resourceType != null) 
then
    if ($m.getDescription() !=null) { 
    	$m.setDescription( $m.getDescription().replace("__RESOURCE_TYPE__",$resourceType));
    }
    $m.setName( $m.getName().replace("__RESOURCE_TYPE__",$resourceType));
end



/*
TRIGGERS
*/
//replaces TEMPLATE_NAME:METRIC name
// TEMPLATE_NAME is left intact. To be replaced later on. For cases like cross template dependencies(icmp ping -> NO_SNMP)
rule "Rule: generate each trigger expression"
	agenda-group "populate"
	no-loop
when
    $m : Metric ($key: key != null, $triggers: triggers)
    $t : Template(metricsRegistry contains $m)
    $tr: Trigger ($e: expression!=null) from $triggers 
then
    logger.debug(marker,"Generating trigger expression (changing TEMPLATE_NAME:METRIC) for "+ $tr.getName());
    $tr.setExpression( $e.replace("TEMPLATE_NAME:METRIC","TEMPLATE_NAME:"+$key));
    if ($tr.getRecoveryExpression() != null) {
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replace("TEMPLATE_NAME:METRIC","TEMPLATE_NAME:"+$key));
    }
end


/*
TRIGGERS REPLACE METRICS in expressions
*/
//replaces TEMPLATE_NAME:__metricID__ name
rule "Rule: replace metrics in expression"
	agenda-group "populate"
	no-loop
when
    
    $m : Metric ($key: key != null, $triggers: triggers)
    $t : Template(metricsRegistry contains $m)
    $tr: Trigger ($e: expression!=null, $metricsUsed: metricsUsed) from $triggers
    
    $m2: Metric (key != null, discoveryRule == $m.discoveryRule, $m2.id memberOf $metricsUsed )
then
    logger.debug(marker,"REPLACING metric "+$m2.getId()+" in triggers: "+ $tr.getName());
    
    $tr.setExpression( $e.replace("TEMPLATE_NAME:__"+$m2.getId()+"__",$t.getName()+":"+$m2.getKey()));
    if ($tr.getRecoveryExpression() != null) {
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replace("TEMPLATE_NAME:__"+$m2.getId()+"__",$t.getName()+":"+$m2.getKey()));
    }    
end


//
rule "Rule: replaces __RESOURCE__ macro in expressions"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null, $triggers: triggers, $resource: resource != null)
    $tr: Trigger () from $triggers 
then
    logger.debug(marker,"Generating trigger expression (changing __RESOURCE__) for "+ $tr.getName());
    if ($tr.getRecoveryExpression() !=null) { 
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replace("__RESOURCE__",$resource));
    }
    if ($tr.getDescription() !=null) { 
    	$tr.setDescription( $tr.getDescription().replace("__RESOURCE__",$resource));
    }
    $tr.setExpression( $tr.getExpression().replace("__RESOURCE__",$resource));
    $tr.setName( $tr.getName().replace("__RESOURCE__",$resource));
end

rule "Rule: replaces ____RESOURCE_TYPE__ macro in expressions"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null, $triggers: triggers, $resourceType: resourceType != null)
    $tr: Trigger () from $triggers 
then
    logger.debug(marker,"Generating trigger expression (changing __RESOURCE_TYPE__) for "+ $tr.getName());
    if ($tr.getRecoveryExpression() !=null) { 
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replace("__RESOURCE_TYPE__",$resourceType));
    }
    if ($tr.getDescription() !=null) { 
    	$tr.setDescription( $tr.getDescription().replace("__RESOURCE_TYPE__",$resourceType));
    }
    $tr.setExpression( $tr.getExpression().replace("__RESOURCE_TYPE__",$resourceType));
    $tr.setName( $tr.getName().replace("__RESOURCE_TYPE__",$resourceType));
end



//
rule "Rule: replaces __RESOURCE__ macro in applicationPrototype"
	agenda-group "populate"
	no-loop
    dialect "mvel"
when    
    $m : Metric ($ap: applicationPrototype contains "__RESOURCE__", $resource: resource != null)
then
    logger.debug(marker,"Replacing resource in application_prototype "+ $m.id);
    $m.applicationPrototype = $ap.replace("__RESOURCE__", $resource);
end

rule "Rule: replaces __RESOURCE_TYPE__ macro in applicationPrototype"
	agenda-group "populate"
	no-loop
    dialect "mvel"
when    
    $m : Metric ($ap: applicationPrototype != null, $resourceType: resourceType != null)
then
    logger.debug(marker,"Replacing resourceType in application_prototype "+ $m.id);
    $m.applicationPrototype = $ap.replace("__RESOURCE_TYPE__",$resourceType)
    
end






/*
CALCULATED EXPRESSIONS REPLACE METRICS in expressions
*/

//replaces TEMPLATE_NAME:__metricID__ name
rule "Rule: replace metrics in expression formula"
	agenda-group "populate"
	no-loop
    dialect "mvel"
when
    
    $m : Metric ($key: key != null, $expression: expressionFormula != null, $metricsUsed: metricsUsed)
    $t : Template(metricsRegistry contains $m)
    $m2: Metric (key != null, discoveryRule == $m.discoveryRule, $m2.id memberOf $metricsUsed )
then
    logger.debug(marker,"REPLACING metric "+$m2.getId()+" in expressionFormula: "+ $m.id);
    $m.expressionFormula =  $expression.replace("__"+$m2.id+"__",$m2.getKeyQuotesEscaped());
end
//
rule "Rule: replaces __RESOURCE__ macro in expression formula"
	agenda-group "populate"
	no-loop
    dialect "mvel"
when    
    $m : Metric ($key: key != null, $expression: expressionFormula != null, $resource: resource != null)
then
    logger.debug(marker,"Generating formula expression for CALCULATED (changing __RESOURCE__) for "+ $m.id);
    $m.expressionFormula = $m.expressionFormula.replace("__RESOURCE__",$resource);
end

rule "Rule: replaces __RESOURCE_TYPE__ macro in expression formula"
	agenda-group "populate"
	no-loop
    dialect "mvel"
when    
    $m : Metric ($key: key != null, $expression: expressionFormula != null, $resourceType: resourceType != null)
then
    logger.debug(marker,"Generating formula expression for CALCULATED (changing __RESOURCE_TYPE__) for "+ $m.id);
    $m.expressionFormula = $m.expressionFormula.replace("__RESOURCE_TYPE__",$resourceType);
end
