package org.zabbix.template.generator.objects
;
/*
METRICS
*/
//
rule "Rule: replaces __ALARM_OBJECT__ macro in metrics"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null,  $alarmObject: alarmObject != null) 
then
    if ($m.getDescription() !=null) { 
    	$m.setDescription( $m.getDescription().replaceAll("__ALARM_OBJECT__",$alarmObject));
    }
    $m.setName( $m.getName().replaceAll("__ALARM_OBJECT__",$alarmObject));
end

rule "Rule: replaces __ALARM_OBJECT_TYPE__ macro in metrics"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null, $alarmObjectType: alarmObjectType != null) 
then
    if ($m.getDescription() !=null) { 
    	$m.setDescription( $m.getDescription().replaceAll("__ALARM_OBJECT_TYPE__",$alarmObjectType));
    }
    $m.setName( $m.getName().replaceAll("__ALARM_OBJECT_TYPE__",$alarmObjectType));
end



/*
TRIGGERS
*/
//replaces TEMPLATE_NAME:METRIC name
// TEMPLATE_NAME is left intact. To be replaced later on. For cases like cross template dependencies(icmp ping -> NO_SNMP)
rule "Rule: generate each trigger expression"
	agenda-group "populate"
	no-loop
when
    
    $m : Metric ($key: key != null, $triggers: triggers)
    $t : Template(metricsRegistry contains $m)
    $tr: Trigger ($e: expression!=null) from $triggers 
then
    logger.debug(marker,"Generating trigger expression (changing TEMPLATE_NAME:METRIC) for "+ $tr.getName());
    $tr.setExpression( $e.replaceAll("TEMPLATE_NAME:METRIC","TEMPLATE_NAME:"+$key));
    if ($tr.getRecoveryExpression() != null) {
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replaceAll("TEMPLATE_NAME:METRIC","TEMPLATE_NAME:"+$key));
    }
end


/*
TRIGGERS REPLACE METRICS in expressions
*/
//replaces TEMPLATE_NAME:METRIC name
rule "Rule: replace metrics in expression"
	agenda-group "populate"
	no-loop
when
    
    $m : Metric ($key: key != null, $triggers: triggers)
    $t : Template(metricsRegistry contains $m)
    $tr: Trigger ($e: expression!=null, $metricsUsed: metricsUsed) from $triggers
    
    $m2: Metric (key != null, discoveryRule == $m.discoveryRule, $m2.id memberOf $metricsUsed )
then
    logger.warn(marker,"REPLACING metric "+$m2.getId()+" in triggers: "+ $tr.getName());
    
    $tr.setExpression( $e.replaceAll("TEMPLATE_NAME:__"+$m2.getId()+"__",$t.getName()+":"+$m2.getKey()));
    if ($tr.getRecoveryExpression() != null) {
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replaceAll("TEMPLATE_NAME:__"+$m2.getId()+"__",$t.getName()+":"+$m2.getKey()));
    }    
end


//
rule "Rule: replaces __ALARM_OBJECT__ macro in expressions"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null, $triggers: triggers, $alarmObject: alarmObject != null)
    $tr: Trigger () from $triggers 
then
    logger.debug(marker,"Generating trigger expression (changing __ALARM_OBJECT__) for "+ $tr.getName());
    if ($tr.getRecoveryExpression() !=null) { 
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replaceAll("__ALARM_OBJECT__",$alarmObject));
    }
    if ($tr.getDescription() !=null) { 
    	$tr.setDescription( $tr.getDescription().replaceAll("__ALARM_OBJECT__",$alarmObject));
    }
    $tr.setExpression( $tr.getExpression().replaceAll("__ALARM_OBJECT__",$alarmObject));
    $tr.setName( $tr.getName().replaceAll("__ALARM_OBJECT__",$alarmObject));
end

rule "Rule: replaces ____ALARM_OBJECT_TYPE__ macro in expressions"
	agenda-group "populate"
	no-loop
when    
    $m : Metric ($key: key != null, $triggers: triggers, $alarmObjectType: alarmObjectType != null)
    $tr: Trigger () from $triggers 
then
    logger.debug(marker,"Generating trigger expression (changing __ALARM_OBJECT_TYPE__) for "+ $tr.getName());
    if ($tr.getRecoveryExpression() !=null) { 
    	$tr.setRecoveryExpression( $tr.getRecoveryExpression().replaceAll("__ALARM_OBJECT_TYPE__",$alarmObjectType));
    }
    if ($tr.getDescription() !=null) { 
    	$tr.setDescription( $tr.getDescription().replaceAll("__ALARM_OBJECT_TYPE__",$alarmObjectType));
    }
    $tr.setExpression( $tr.getExpression().replaceAll("__ALARM_OBJECT_TYPE__",$alarmObjectType));
    $tr.setName( $tr.getName().replaceAll("__ALARM_OBJECT_TYPE__",$alarmObjectType));
end